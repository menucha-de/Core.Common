package havis.util.core.common.license;

import java.security.KeyFactory;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.fasterxml.jackson.databind.ObjectMapper;

import havis.util.core.license.License;
import havis.util.core.license.LicenseException;

public class Util {

	private final static Logger log = Logger.getLogger(Util.class.getName());
	private final static ObjectMapper mapper = new ObjectMapper();
	private final static String serial = System.getProperty("mica.device.serial_no");

	private final static byte[] bytes = { 0x30, -0x7e, 0x2, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, -0x7a, 0x48, -0x7a, -0x9, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3,
			-0x7e, 0x2, 0xf, 0x0, 0x30, -0x7e, 0x2, 0xa, 0x2, -0x7e, 0x2, 0x1, 0x0, -0x31, 0x69, -0x63, -0x25, 0x78, 0x3f, 0x67, -0x71, 0x10, -0x7f, 0x12,
			0x61, 0x17, 0x7b, 0x3e, -0x7a, -0x6e, -0x4, -0x65, -0x63, 0x30, -0x2c, -0x30, -0x13, -0xf, -0xb, -0x51, 0x66, 0x6d, -0x4e, -0x10, 0x3b, -0x48,
			0x59, -0x2b, 0x0, -0x55, -0x4a, -0x76, -0x31, 0x66, -0x14, 0x54, -0x6c, -0x69, 0x7c, 0x1c, -0xb, -0x4d, 0x4e, -0x5a, -0x6c, 0x1c, 0x76, -0x60,
			-0x5a, 0x51, 0x2e, 0x65, 0x27, 0x1f, -0x62, 0x60, 0xe, 0x44, -0x18, 0xf, -0x2b, 0x18, 0x51, 0x65, -0x2f, 0x11, -0x2a, 0x30, -0x7e, -0x71, 0x56,
			-0x2, 0x12, 0x30, 0x32, -0x9, 0x10, -0x53, 0x62, 0x2, -0x6c, 0x50, -0xe, -0x30, -0x58, -0x3e, -0x36, -0x63, -0x6a, -0x3f, -0x62, -0x3e, -0x51,
			0x47, 0x76, -0x49, -0x57, 0x62, -0x6c, 0x4a, -0x63, 0x6, 0x5, -0x6e, -0x17, -0x36, 0x8, 0x47, 0x37, -0x77, -0x11, 0x19, 0x3e, -0x21, -0x9, 0x4,
			0x4e, -0x55, -0x24, 0x27, 0x45, -0x2b, 0x12, -0x4a, 0x3a, 0x3e, 0xa, 0x29, 0x7f, -0x35, 0x4a, 0x39, -0x2b, -0x1d, 0x24, -0x6e, -0x3d, 0x25, 0x62,
			-0x3, -0x53, 0x23, 0x6e, 0x57, -0x40, 0x3d, -0x7d, -0x6b, 0x4d, -0xa, -0x27, -0x27, -0xe, 0x15, 0x6f, 0x3a, 0x3d, -0x52, 0x41, 0x4f, 0x8, -0x58,
			0x21, -0x14, 0x5, 0x1e, 0xb, -0x31, -0x28, -0x58, 0x41, -0x1c, -0x35, -0x3d, -0x39, 0x60, -0x5c, 0x5b, -0x73, 0x50, -0x4e, 0x39, 0x24, -0x53,
			-0x29, -0x2a, -0x19, 0x20, 0x35, 0x4, 0x0, 0x2a, 0x3e, -0x26, -0x64, 0x5e, -0x48, 0x6b, 0x38, 0x5d, 0x4d, -0x59, 0x65, 0x5e, -0x47, 0x1b, -0x5e,
			0x52, -0x78, 0x6b, -0x19, 0x2f, 0x10, -0x6c, -0x55, -0x60, -0x5e, -0xe, 0x5c, 0x2e, -0x55, 0x69, -0x70, 0x3a, -0x26, -0x34, -0x64, -0x50, -0x52,
			0x7d, 0x22, 0x2d, 0x71, -0x32, 0x21, 0x19, -0x33, -0x1e, -0x18, 0x14, -0x80, -0x59, 0x1b, -0x50, 0x1a, -0x37, -0x27, 0x17, 0x4, 0x7, 0x7b, -0x48,
			-0x53, 0x36, -0x5d, 0x47, 0x7e, 0x69, 0x79, 0x16, 0x31, -0x12, -0x38, 0x42, -0x43, 0x5, -0x1f, -0x40, 0x45, 0x6c, -0x75, -0x6a, 0x1d, -0x16, -0x74,
			0x3e, -0x2c, 0x17, -0x4e, 0x0, -0x5a, -0x34, 0x2c, -0x10, 0x15, -0x32, -0x30, 0x11, -0x61, -0x66, 0x6b, 0x23, -0x22, -0x79, 0x3b, -0x42, 0x54,
			-0x7d, 0x17, 0x2, -0x15, -0x74, -0x3b, 0x38, 0x7c, 0x2, -0x41, 0x26, -0x23, 0xd, -0x5c, -0x71, 0x30, 0x0, -0x43, 0x57, 0x4d, -0x3, -0x73, -0x65,
			0x63, 0x49, -0x4e, -0x65, 0x4c, 0x25, -0x63, -0x67, -0x78, 0x19, -0x4b, -0x6b, 0x3f, 0x17, -0x3, -0x5a, -0x46, -0x53, -0x69, 0x42, -0xd, 0x46, 0x4,
			0x42, -0x38, -0x42, 0x25, 0x6f, 0x7c, -0x6e, -0x60, 0x4, 0x69, 0x63, 0x7d, 0x74, -0x45, -0x7d, -0x53, -0x41, -0x5f, 0x7b, 0x3f, 0x2a, -0x7a, 0x5c,
			0x78, -0x6e, 0x5f, -0x4a, 0x19, -0x37, -0x25, -0x47, 0x1e, 0xe, 0x2e, 0x4, -0x76, -0x1b, -0x72, -0xe, 0x42, -0x5, -0x5, -0x2b, 0x7b, -0x23, -0x40,
			-0x54, -0x72, -0x40, 0x3b, 0x5a, 0x37, 0x26, -0x40, -0x33, -0x5e, 0x26, 0x22, -0x37, -0x3a, 0x3f, 0x3b, -0x4, 0x18, 0x60, 0x0, -0x51, 0x51, -0x50,
			-0x6e, 0x6, -0x2d, -0x17, 0x54, -0x67, -0x7f, 0x10, 0x5f, 0x3f, 0x24, 0x1d, -0x5a, -0x55, -0x1e, 0x47, -0x68, 0x5, -0x36, 0x20, 0x56, 0x47, -0x16,
			0x5d, -0xa, 0x1, 0x21, 0x31, -0x51, -0x18, -0xc, 0x39, -0x1d, -0x5c, 0x2, 0x55, -0x74, -0x4e, 0x50, -0x62, -0x74, -0x4f, -0x6c, -0x64, 0xe, 0x71,
			0x62, -0x51, -0x56, 0x73, -0x3e, 0x6f, 0x6, -0x64, -0x14, 0x58, 0x4e, -0x2e, 0x3b, -0xd, 0x72, 0x3f, 0x7e, -0x3f, -0x59, -0x59, 0x61, 0x6c, -0x16,
			0xe, -0x1c, -0x52, 0x4c, 0x69, 0x74, 0x7a, 0xc, 0x53, 0x6e, -0x11, 0x23, -0x32, 0x28, 0x11, -0x49, 0x9, -0x6, 0x6f, -0x36, -0x69, -0x1a, -0x1f,
			0x2f, 0x2, 0x3, 0x1, 0x0, 0x1 };

	private static Signature sign;

	static {
		try {
			sign = Signature.getInstance("SHA512withRSA");
			sign.initVerify(KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(bytes)));
		} catch (Exception e) {
			log.log(Level.FINE, "Failed to initializes license service", e);
		}
	}

	public static String getSerial() {
		return serial;
	}

	public static License get(String product, String data) throws LicenseException {
		try {
			byte[] s = Base64.getDecoder().decode(data);
			byte[] bytes = Arrays.copyOf(s, s.length - 512 - 1);
			sign.update(bytes);
			if (sign.verify(Arrays.copyOfRange(s, s.length % 512, s.length))) {
				License license = mapper.readValue(bytes, License.class);
				if (product != null && product.equals(license.getProduct())) {
					if (serial != null && serial.equals(license.getSerial())) {
						return license;
					} else {
						throw new LicenseException("Illegal serial in license");
					}
				} else {
					throw new LicenseException("Illegal product in license");
				}
			} else {
				throw new LicenseException("Illegal signature in license");
			}
		} catch (LicenseException e) {
			throw e;
		} catch (Exception e) {
			throw new LicenseException("Failed to evaluate license", e);
		}
	}
}